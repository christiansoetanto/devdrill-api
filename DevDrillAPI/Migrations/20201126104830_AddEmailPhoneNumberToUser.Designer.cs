// <auto-generated />
using System;
using DevDrillAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevDrillAPI.Migrations
{
    [DbContext(typeof(DevDrillDbContext))]
    [Migration("20201126104830_AddEmailPhoneNumberToUser")]
    partial class AddEmailPhoneNumberToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("DevDrillAPI.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("TrackId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("TrackId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Detail = "Dalam kursus ini, kalian akan diajarkan Typescript dari dasar hingga fitur-fitur penting dari Typescript sampai di titik kalian dapa",
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 981, DateTimeKind.Local).AddTicks(5134),
                            InstructorId = 1,
                            Name = "Introduction to TS",
                            PhotoUrl = "course1.jpg",
                            TrackId = 1
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscussionGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("DiscussionId");

                    b.HasIndex("DiscussionGroupId");

                    b.ToTable("Discussions");

                    b.HasData(
                        new
                        {
                            DiscussionId = 1,
                            DiscussionGroupId = 1,
                            Name = "General Advice"
                        },
                        new
                        {
                            DiscussionId = 2,
                            DiscussionGroupId = 1,
                            Name = "Other Frameworks"
                        },
                        new
                        {
                            DiscussionId = 3,
                            DiscussionGroupId = 2,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 4,
                            DiscussionGroupId = 2,
                            Name = "Regarding Video"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.DiscussionGroup", b =>
                {
                    b.Property<int>("DiscussionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("DiscussionGroupId");

                    b.ToTable("DiscussionGroups");

                    b.HasData(
                        new
                        {
                            DiscussionGroupId = 1,
                            Name = "Public discussion",
                            PhotoUrl = "dg1.jpg"
                        },
                        new
                        {
                            DiscussionGroupId = 2,
                            Name = "Angular discussion",
                            PhotoUrl = "dg1.jpg"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            CompanyName = "Perusahaan Saya",
                            Title = "CEO and Boss",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LessonGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("VideoUrl")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("LessonId");

                    b.HasIndex("LessonGroupId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            Detail = "ini adalah lesson hello world in ts",
                            EndDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(5225),
                            LessonGroupId = 1,
                            Name = "Hello world in ts",
                            StartDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(5187),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 2,
                            Detail = "ini adlaah selection n loop control",
                            EndDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6201),
                            LessonGroupId = 1,
                            Name = "selection n loop control",
                            StartDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6194),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 3,
                            Detail = "ini adlah creating a basic calculator",
                            EndDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6229),
                            LessonGroupId = 1,
                            Name = "creating a basic calculator",
                            StartDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6227),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 4,
                            Detail = "ini adalah definig a cufntioni",
                            EndDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6232),
                            LessonGroupId = 2,
                            Name = "Defining a function",
                            StartDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6231),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 5,
                            Detail = "this is class n object ",
                            EndDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6235),
                            LessonGroupId = 2,
                            Name = "class n object ",
                            StartDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6234),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 6,
                            Detail = "ini dalah detail darti making a basci tdiyr pogmra",
                            EndDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6239),
                            LessonGroupId = 2,
                            Name = "making a basci tdiyr pogmra",
                            StartDateTime = new DateTime(2020, 11, 26, 17, 48, 29, 989, DateTimeKind.Local).AddTicks(6237),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.LessonGroup", b =>
                {
                    b.Property<int>("LessonGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonGroupName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("LessonGroupId");

                    b.HasIndex("CourseId");

                    b.ToTable("LessonGroups");

                    b.HasData(
                        new
                        {
                            LessonGroupId = 1,
                            CourseId = 1,
                            LessonGroupName = "Basic Operation n Meth"
                        },
                        new
                        {
                            LessonGroupId = 2,
                            CourseId = 1,
                            LessonGroupName = "FUnction n class"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MappingUserCourses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            UserId = 1,
                            Progress = 8
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserTrack", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrackId", "UserId");

                    b.HasIndex("TrackId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MappingUserTracks");

                    b.HasData(
                        new
                        {
                            TrackId = 1,
                            UserId = 1,
                            Progress = 8
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ThreadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReplyId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            ReplyId = 1,
                            Detail = "how to make this into this i dont know pleaseeeee help meeeee",
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 993, DateTimeKind.Local).AddTicks(5394),
                            ThreadId = 1,
                            UserId = 1
                        },
                        new
                        {
                            ReplyId = 2,
                            Detail = "okay so this is how you do this....",
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 993, DateTimeKind.Local).AddTicks(6256),
                            ThreadId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ReplyId = 3,
                            Detail = "hey guys i got error 500 cna somebody help me?",
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 993, DateTimeKind.Local).AddTicks(6282),
                            ThreadId = 2,
                            UserId = 1
                        },
                        new
                        {
                            ReplyId = 4,
                            Detail = "no we cant",
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 993, DateTimeKind.Local).AddTicks(6284),
                            ThreadId = 2,
                            UserId = 2
                        },
                        new
                        {
                            ReplyId = 5,
                            Detail = "You want to find this topic but HTTP404 Not Found...",
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 993, DateTimeKind.Local).AddTicks(6285),
                            ThreadId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Thread", b =>
                {
                    b.Property<int>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Upvote")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ThreadId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            ThreadId = 1,
                            DiscussionId = 1,
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 994, DateTimeKind.Local).AddTicks(5492),
                            Topic = "How to make this into",
                            Upvote = 16,
                            UserId = 1
                        },
                        new
                        {
                            ThreadId = 2,
                            DiscussionId = 1,
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 994, DateTimeKind.Local).AddTicks(6296),
                            Topic = "Error 500",
                            Upvote = 53,
                            UserId = 1
                        },
                        new
                        {
                            ThreadId = 3,
                            DiscussionId = 3,
                            InsertDate = new DateTime(2020, 11, 26, 17, 48, 29, 994, DateTimeKind.Local).AddTicks(6347),
                            Topic = "HTTP404 Not Found",
                            Upvote = 312,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("TrackGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrackId");

                    b.HasIndex("TrackGroupId");

                    b.ToTable("Track");

                    b.HasData(
                        new
                        {
                            TrackId = 1,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian HTML sebagai bahasa markup yang sering digunakan dalam pembuatan struktur tampilan web. Ketika l",
                            Name = "HTML",
                            PhotoUrl = "track1.jpg",
                            TrackGroupId = 1
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.TrackGroup", b =>
                {
                    b.Property<int>("TrackGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackGroupName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TrackGroupId");

                    b.ToTable("TrackGroups");

                    b.HasData(
                        new
                        {
                            TrackGroupId = 1,
                            TrackGroupName = "Fundamental Tracks"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<byte>("IsInstructor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@email.com",
                            IsInstructor = (byte)0,
                            Name = "user biasa",
                            Password = "user1",
                            PhoneNumber = "0812121212112",
                            PhotoUrl = "photo1.jpg",
                            Username = "user1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@email.com",
                            IsInstructor = (byte)1,
                            Name = "instructor",
                            Password = "user2",
                            PhoneNumber = "08777777",
                            PhotoUrl = "photo2.jpg",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Course", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Discussion", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.DiscussionGroup", "DiscussionGroup")
                        .WithMany("Discussions")
                        .HasForeignKey("DiscussionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Instructor", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithOne("Instructor")
                        .HasForeignKey("DevDrillAPI.Entities.Instructor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Lesson", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.LessonGroup", "LessonGroup")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.LessonGroup", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Course", "Course")
                        .WithMany("LessonGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserCourse", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Course", "Course")
                        .WithOne("MappingUserCourse")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserCourse", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithOne("MappingUserCourse")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserCourse", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserTrack", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Track", "Track")
                        .WithOne("MappingUserTrack")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserTrack", "TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithOne("MappingUserTrack")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserTrack", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Reply", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Thread", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Discussion", "Discussion")
                        .WithMany("Threads")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Track", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.TrackGroup", "TrackGroup")
                        .WithMany("Tracks")
                        .HasForeignKey("TrackGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
