// <auto-generated />
using System;
using DevDrillAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevDrillAPI.Migrations
{
    [DbContext(typeof(DevDrillDbContext))]
    partial class DevDrillDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("DevDrillAPI.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("TrackId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Detail = "Dalam kursus ini, kalian akan diajarkan Typescript dari dasar hingga fitur-fitur penting dari Typescript sampai di titik kalian dapa",
                            InsertDate = new DateTime(2012, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 1,
                            Name = "Introduction to TS",
                            PhotoUrl = "typescript.png",
                            TrackId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            Detail = "Dalam kursus ini, kalian akan diajarkan bahasa pemrograman C# dari dasar hingga fitur-fitur penting dari C# sampai di titik kalian dapat mengimplementasikan C# ke dalam proyek apapun yang kalian kerjakan. Kursus ini juga menjadi dasar bagi kalian yang ingin belajar tentang framework ASP.NET",
                            InsertDate = new DateTime(2014, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 1,
                            Name = "Asynchronus Programming in C#",
                            PhotoUrl = "csharp.png",
                            TrackId = 1
                        },
                        new
                        {
                            CourseId = 3,
                            Detail = "Dalam kursus ini, kalian akan diajarkan bahasa pemrograman PHP  dari dasar hingga fitur-fitur penting dari PHP sampai di titik kalian dapat mengimplementasikan PHP ke dalam proyek apapun yang kalian kerjakan.Kursus ini juga menjadi dasar bagi kalian yang ingin belajar tentang framework Laravel",
                            InsertDate = new DateTime(2014, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 1,
                            Name = "Object-Oriented Programming with PHP",
                            PhotoUrl = "php.png",
                            TrackId = 1
                        },
                        new
                        {
                            CourseId = 4,
                            Detail = "Python adalah bahasa pemrograman terkenal yang dibuat dengan fokus untuk mempermudah programmer untuk membaca kodingnya.Dalam kursus ini, kalian akan diajarkan Python dari dasar sampai kalian dapat mengimplementasikannya dalam aplikasi kalian.",
                            InsertDate = new DateTime(2019, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorId = 1,
                            Name = "Python Programming Language",
                            PhotoUrl = "python.png",
                            TrackId = 1
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscussionGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscussionId");

                    b.HasIndex("DiscussionGroupId");

                    b.ToTable("Discussions");

                    b.HasData(
                        new
                        {
                            DiscussionId = 1,
                            DiscussionGroupId = 1,
                            Name = "General Advice"
                        },
                        new
                        {
                            DiscussionId = 2,
                            DiscussionGroupId = 1,
                            Name = "Other Frameworks"
                        },
                        new
                        {
                            DiscussionId = 3,
                            DiscussionGroupId = 2,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 4,
                            DiscussionGroupId = 2,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 5,
                            DiscussionGroupId = 2,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 6,
                            DiscussionGroupId = 3,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 7,
                            DiscussionGroupId = 3,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 8,
                            DiscussionGroupId = 3,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 9,
                            DiscussionGroupId = 4,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 10,
                            DiscussionGroupId = 4,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 11,
                            DiscussionGroupId = 4,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 12,
                            DiscussionGroupId = 5,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 13,
                            DiscussionGroupId = 5,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 14,
                            DiscussionGroupId = 5,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 15,
                            DiscussionGroupId = 6,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 16,
                            DiscussionGroupId = 6,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 17,
                            DiscussionGroupId = 6,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 18,
                            DiscussionGroupId = 7,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 19,
                            DiscussionGroupId = 7,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 20,
                            DiscussionGroupId = 7,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 21,
                            DiscussionGroupId = 8,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 22,
                            DiscussionGroupId = 8,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 23,
                            DiscussionGroupId = 8,
                            Name = "Development Advice"
                        },
                        new
                        {
                            DiscussionId = 24,
                            DiscussionGroupId = 9,
                            Name = "Installation"
                        },
                        new
                        {
                            DiscussionId = 25,
                            DiscussionGroupId = 9,
                            Name = "Regarding Video"
                        },
                        new
                        {
                            DiscussionId = 26,
                            DiscussionGroupId = 9,
                            Name = "Development Advice"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.DiscussionGroup", b =>
                {
                    b.Property<int>("DiscussionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("DiscussionGroupId");

                    b.ToTable("DiscussionGroups");

                    b.HasData(
                        new
                        {
                            DiscussionGroupId = 1,
                            Name = "Public Discussion",
                            PhotoUrl = ""
                        },
                        new
                        {
                            DiscussionGroupId = 2,
                            Name = "Angular Discussion",
                            PhotoUrl = "angular.png"
                        },
                        new
                        {
                            DiscussionGroupId = 3,
                            Name = "Node.js Discussion",
                            PhotoUrl = "nodejs.png"
                        },
                        new
                        {
                            DiscussionGroupId = 4,
                            Name = "ASP.NET Core Discussion",
                            PhotoUrl = "netcore.png"
                        },
                        new
                        {
                            DiscussionGroupId = 5,
                            Name = "Laravel discussion",
                            PhotoUrl = "angular.png"
                        },
                        new
                        {
                            DiscussionGroupId = 6,
                            Name = "React.js discussion",
                            PhotoUrl = "react.png"
                        },
                        new
                        {
                            DiscussionGroupId = 7,
                            Name = "Vue.js discussion",
                            PhotoUrl = "vuejs.png"
                        },
                        new
                        {
                            DiscussionGroupId = 8,
                            Name = "Django discussion",
                            PhotoUrl = "django.png"
                        },
                        new
                        {
                            DiscussionGroupId = 9,
                            Name = "Spring discussion",
                            PhotoUrl = "spring.png"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            CompanyName = "Perusahaan Saya",
                            Title = "CEO and Boss",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LessonGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("LessonId");

                    b.HasIndex("LessonGroupId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            Detail = "ini adalah lesson hello world in ts",
                            EndDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(4685),
                            LessonGroupId = 1,
                            Name = "Hello world in ts",
                            StartDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 494, DateTimeKind.Local).AddTicks(127),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 2,
                            Detail = "ini adlaah selection n loop control",
                            EndDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7709),
                            LessonGroupId = 1,
                            Name = "selection n loop control",
                            StartDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7699),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 3,
                            Detail = "ini adlah creating a basic calculator",
                            EndDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7736),
                            LessonGroupId = 1,
                            Name = "creating a basic calculator",
                            StartDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7735),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 4,
                            Detail = "ini adalah definig a cufntioni",
                            EndDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7739),
                            LessonGroupId = 2,
                            Name = "Defining a function",
                            StartDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7738),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 5,
                            Detail = "this is class n object ",
                            EndDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7742),
                            LessonGroupId = 2,
                            Name = "class n object ",
                            StartDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7741),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        },
                        new
                        {
                            LessonId = 6,
                            Detail = "ini dalah detail darti making a basci tdiyr pogmra",
                            EndDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7746),
                            LessonGroupId = 2,
                            Name = "making a basci tdiyr pogmra",
                            StartDateTime = new DateTime(2020, 11, 27, 12, 3, 36, 495, DateTimeKind.Local).AddTicks(7744),
                            ThumbnailUrl = "lesson1.jpg",
                            VideoUrl = "video1"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.LessonGroup", b =>
                {
                    b.Property<int>("LessonGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonGroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LessonGroupId");

                    b.HasIndex("CourseId");

                    b.ToTable("LessonGroups");

                    b.HasData(
                        new
                        {
                            LessonGroupId = 1,
                            CourseId = 1,
                            LessonGroupName = "Basic Operation n Meth"
                        },
                        new
                        {
                            LessonGroupId = 2,
                            CourseId = 1,
                            LessonGroupName = "FUnction n class"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MappingUserCourses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            UserId = 1,
                            Progress = 1
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserTrack", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrackId", "UserId");

                    b.HasIndex("TrackId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MappingUserTracks");

                    b.HasData(
                        new
                        {
                            TrackId = 1,
                            UserId = 1,
                            Progress = 7
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ThreadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Upvote")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReplyId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            ReplyId = 1,
                            Detail = "how to make this into this i dont know pleaseeeee help meeeee",
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 501, DateTimeKind.Local).AddTicks(2445),
                            ThreadId = 1,
                            Upvote = 9,
                            UserId = 1
                        },
                        new
                        {
                            ReplyId = 2,
                            Detail = "okay so this is how you do this....",
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 501, DateTimeKind.Local).AddTicks(3605),
                            ThreadId = 1,
                            Upvote = 7,
                            UserId = 2
                        },
                        new
                        {
                            ReplyId = 3,
                            Detail = "hey guys i got error 500 cna somebody help me?",
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 501, DateTimeKind.Local).AddTicks(3659),
                            ThreadId = 2,
                            Upvote = 6,
                            UserId = 1
                        },
                        new
                        {
                            ReplyId = 4,
                            Detail = "no we cant",
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 501, DateTimeKind.Local).AddTicks(3680),
                            ThreadId = 2,
                            Upvote = 8,
                            UserId = 2
                        },
                        new
                        {
                            ReplyId = 5,
                            Detail = "You want to find this topic but HTTP404 Not Found...",
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 501, DateTimeKind.Local).AddTicks(3701),
                            ThreadId = 3,
                            Upvote = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Thread", b =>
                {
                    b.Property<int>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Upvote")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ThreadId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            ThreadId = 1,
                            DiscussionId = 1,
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 502, DateTimeKind.Local).AddTicks(3660),
                            Topic = "How to make this into",
                            Upvote = 204,
                            UserId = 1
                        },
                        new
                        {
                            ThreadId = 2,
                            DiscussionId = 1,
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 502, DateTimeKind.Local).AddTicks(4813),
                            Topic = "Error 500",
                            Upvote = 236,
                            UserId = 1
                        },
                        new
                        {
                            ThreadId = 3,
                            DiscussionId = 3,
                            InsertDate = new DateTime(2020, 11, 27, 12, 3, 36, 502, DateTimeKind.Local).AddTicks(4866),
                            Topic = "HTTP404 Not Found",
                            Upvote = 443,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrackId");

                    b.HasIndex("TrackGroupId");

                    b.ToTable("Track");

                    b.HasData(
                        new
                        {
                            TrackId = 1,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian HTML sebagai bahasa markup yang sering digunakan dalam pembuatan struktur tampilan web. Ketika l",
                            Name = "HTML",
                            PhotoUrl = "html.png",
                            TrackGroupId = 1
                        },
                        new
                        {
                            TrackId = 2,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian CSS sebagai style yang sering digunakan untuk mempercantik tampilan web. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "CSS",
                            PhotoUrl = "css.png",
                            TrackGroupId = 1
                        },
                        new
                        {
                            TrackId = 3,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian JS sebagai bahasa program yang sering digunakan dalam pembuatan logic dari web. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Javascript",
                            PhotoUrl = "javascript.png",
                            TrackGroupId = 1
                        },
                        new
                        {
                            TrackId = 4,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian React.js sebagai framework frontend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "React.js Developer",
                            PhotoUrl = "react.png",
                            TrackGroupId = 2
                        },
                        new
                        {
                            TrackId = 5,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian Angular sebagai framework frontend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Angular Developer",
                            PhotoUrl = "angular.png",
                            TrackGroupId = 2
                        },
                        new
                        {
                            TrackId = 6,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian Vue.js sebagai framework frontend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Vue.js Developer",
                            PhotoUrl = "vuejs.png",
                            TrackGroupId = 2
                        },
                        new
                        {
                            TrackId = 7,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian .NET Core sebagai framework backend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = ".NET Core Developer",
                            PhotoUrl = "netcore.png",
                            TrackGroupId = 3
                        },
                        new
                        {
                            TrackId = 8,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian Laravel sebagai framework backend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Laravel Developer",
                            PhotoUrl = "laravel.png",
                            TrackGroupId = 3
                        },
                        new
                        {
                            TrackId = 9,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian Django sebagai framework backend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Django Developer",
                            PhotoUrl = "django.png",
                            TrackGroupId = 3
                        },
                        new
                        {
                            TrackId = 10,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian Node.js sebagai run-time environment yang sering digunakan dalam pembuatan web application. Disini kita akan menggunakan Express.js sebagai media frameworknya. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Node.js Developer",
                            PhotoUrl = "nodejs.png",
                            TrackGroupId = 3
                        },
                        new
                        {
                            TrackId = 11,
                            Detail = "Pada track ini, anda akan fokus pada pemakaian Spring sebagai framework backend yang sering digunakan dalam pembuatan web application. Ketika lulus dari track ini, anda akan memahami lebih dalam sampai pada trik-triknya.",
                            Name = "Spring Developer",
                            PhotoUrl = "spring.png",
                            TrackGroupId = 3
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.TrackGroup", b =>
                {
                    b.Property<int>("TrackGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackGroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TrackGroupId");

                    b.ToTable("TrackGroups");

                    b.HasData(
                        new
                        {
                            TrackGroupId = 1,
                            TrackGroupName = "Fundamental Tracks"
                        },
                        new
                        {
                            TrackGroupId = 2,
                            TrackGroupName = "Frontend Developer Tracks"
                        },
                        new
                        {
                            TrackGroupId = 3,
                            TrackGroupName = "Backend Developer Tracks"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<byte>("IsInstructor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@email.com",
                            IsInstructor = (byte)0,
                            Name = "user biasa",
                            Password = "user1",
                            PhoneNumber = "0812121212112",
                            PhotoUrl = "photo1.jpg"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@email.com",
                            IsInstructor = (byte)1,
                            Name = "instructor",
                            Password = "user2",
                            PhoneNumber = "08777777",
                            PhotoUrl = "photo2.jpg"
                        });
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Course", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Discussion", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.DiscussionGroup", "DiscussionGroup")
                        .WithMany("Discussions")
                        .HasForeignKey("DiscussionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Instructor", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithOne("Instructor")
                        .HasForeignKey("DevDrillAPI.Entities.Instructor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Lesson", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.LessonGroup", "LessonGroup")
                        .WithMany("Lessons")
                        .HasForeignKey("LessonGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.LessonGroup", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Course", "Course")
                        .WithMany("LessonGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserCourse", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Course", "Course")
                        .WithOne("MappingUserCourse")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserCourse", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithOne("MappingUserCourse")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserCourse", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.MappingUserTrack", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Track", "Track")
                        .WithOne("MappingUserTrack")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserTrack", "TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithOne("MappingUserTrack")
                        .HasForeignKey("DevDrillAPI.Entities.MappingUserTrack", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Reply", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Thread", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.Discussion", "Discussion")
                        .WithMany("Threads")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevDrillAPI.Entities.User", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevDrillAPI.Entities.Track", b =>
                {
                    b.HasOne("DevDrillAPI.Entities.TrackGroup", "TrackGroup")
                        .WithMany("Tracks")
                        .HasForeignKey("TrackGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
